package br.com.conquer.marcus.controller;

import java.util.List;
import java.util.Optional;

import javax.validation.Valid;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.conquer.marcus.model.User;
import br.com.conquer.marcus.model.dto.UserDTO;
import br.com.conquer.marcus.service.IUserService;


@RestController 
@RequestMapping("/conquer/user")
public class UserController {

	@Autowired
	IUserService userService;
	
	@CrossOrigin 
	@GetMapping 
	public ResponseEntity<List<User>> findAllUsers() { 
		List<User> userList = userService.findAll(); 
		return new ResponseEntity<>(userList, HttpStatus.OK); 
	}
	
	
	@CrossOrigin 
	@GetMapping("/{id}")
	public ResponseEntity<User> findUserById(@PathVariable Long id) { 
		Optional<User> user = userService.findById(id); 
		if (user.isPresent()) {
			return new ResponseEntity<>(user.get(), HttpStatus.OK); 
		} else {
			return new ResponseEntity<>(user.get(), HttpStatus.NOT_FOUND); 
		}
	}


	@CrossOrigin
	@PostMapping 
	public ResponseEntity<Response<User>> createUser(@RequestBody @Valid UserDTO userDTO, BindingResult validationResult) { 
		User user = userService.create(userService.toModel(userDTO)); 
		
		Response<User> response = new Response<>(); 
		
		if (validationResult.hasErrors()) { 
			validationResult.getAllErrors().forEach(error -> response.addErrorMsgToResponse(error.getDefaultMessage())); 
			return ResponseEntity.badRequest().body(response);
		}
		   return new ResponseEntity<>(response, HttpStatus.OK); 
		}

	@CrossOrigin 
	@PutMapping("/update") 
	public ResponseEntity<Response<User>> updateUser(@RequestBody @Valid UserDTO userDTO, BindingResult validationResult) { 
		Response<User> response = new Response<>();

		if (validationResult.hasErrors()) {
			validationResult.getAllErrors().forEach(error -> response.addErrorMsgToResponse(error.getDefaultMessage()));
			return ResponseEntity.badRequest().body(response);
		}

		if (this.userService.findById(userDTO.getId()).isPresent()) {
			User user = userService.update(userService.toModel(userDTO));  
			return new ResponseEntity<>(response, HttpStatus.OK); 
		} else {
			response.addErrorMsgToResponse("Usuário não encontrado"); 
			return new ResponseEntity<>(response, HttpStatus.NOT_FOUND); 
		}
	}

	@CrossOrigin 
	@DeleteMapping("delete/{id}") 
	public ResponseEntity<Void> deleteUser(@PathVariable Long id) { 
		if (this.userService.findById(id).isPresent()) { 
			userService.deleteById(id); 
			return new ResponseEntity<>(null, HttpStatus.OK); 
		} else {
			return new ResponseEntity<>(null, HttpStatus.NOT_FOUND); 
		}
	}

}
